I will give you the data from an API request from which I want you to create integration automated tests in Jest.

Here are the details about parameters from the request data:
`endpoint` - endpoint for the API request
`method` - the HTTP method of the request
`headers` - the HTTP headers of the request
`reqBody` - the body of the request (eg. in a POST request)
`reqQuery` - the query parameters of the request
`response` - that is the response that the server returned from the request
`statusCode` - the returned status code for the request
`mongoQueryNum` - the number of Mongo queries executed during the request processing
`mongoQueries` - it shows an array of all Mongo queries that were executed during the request processing - each object in this array represents one mongo query that was made


Here are the details about the parameters of objects inside `mongoQueries` array:
`preQueryDocs` - mongo documents that were in the database before the query was made
`postQueryDocs` - mongo documents that were in the database after the query was made
`mongoResponse` - a response that Mongo returned
`mongoQuery` - a query object for finding documents in the database
`mongoOptions` - options for the mongo query
`mongoOperation` - mongo operation (eg. "find", "insert", etc.)
`db` - the database on which the query is being made
`collection` - the collection on which the query is being made

-----------------------------------------------------------------------------------------------------------------------

`preQueryDocs` and `postQueryDocs` are important so that you can test if an update in the database happened correctly so make sure to include in the test a check to see if the database was correctly updated. Also, since Mongo's `ObjectId` is not a valid JSON value, you might see a string like this - "ObjectId(\"642548c3dabd5517e39b5827\")". Keep in mind that this should be converted to `new ObjectId("642548c3dabd5517e39b5827")` and if you need to initiate ObjectId, you can require it from "mongodb" - like this:
```javascript
const { ObjectId } = require("mongodb");
let someObjectId = new ObjectId(id);
```

Don't assert or set up every single parameter but only the ones that are important (the ones that are usually used in Jest integration tests). Also, never assert full objects but only the values inside an object. For example, don't do `expect(object).toMatchObject(someOtherObject);` but rather do `expect(object.someValue).toBe(someOtherObject.someValue);`.

If the database was updated, check if the database was updated correctly. When you need to make a query to a Mongo collection, use `global.getMongoCollection(collection)` function which will return the MongoDB collection which you can query how you want. For example, if you want to do a `find` query on a collection "users", you can do `global.getMongoCollection('users').find(query)`.

If you need to use the Mongo database for anything, add `let mongoDocuments = await global.setUpDb(testId);` to the beginning of the `beforeAll` function. You don't need to insert any documents in the database because all needed documents will be inserted in the `setUpDb` function. You can find the `testId` in the JSON request data that I will give you.
The returned `mongoDocuments` variable is a JSON object that has a collection name as a key and an array of all documents in that collection that are present in the database as a value. The format of `mongoDocuments` object is this:
```json
{
    "<COLLECTION_NAME_1>": "<ARRAY_OF_DOCUMENTS_IN_COLLECTION_1>",
    "<COLLECTION_NAME_2>": "<ARRAY_OF_DOCUMENTS_IN_COLLECTION_2>",
    "<COLLECTION_NAME_3>": "<ARRAY_OF_DOCUMENTS_IN_COLLECTION_3>"
}
```

If you need an auth token for the test, there are few steps you have to follow. Let's break them down step by step:
1. you can retrieve auth token by calling `getAuthToken` function from the file "./auth" - always wrap it in a try-catch block because it can throw an error
2. you have to pass the <APP_URL>, which is url of the app (eg. "http://localhost:3000") as first argument to `getAuthToken` function
3. you have to pass the user object from the database data as the second argument to `getAuthToken` function. You need to determine the collection name and the index of the user document from the `mongoDocuments` array that will be shown below and pass mongoDocuments[<COLLECTION_NAME>][<INDEX_OF_USER_DOCUMENT>] to `getAuthToken` function, eg. "getAuthToken('http://localhost:3000', mongoDocuments['users'][1])".
Here is template how to get auth token:
```javascript
const getAuthToken = require('./auth');
let authToken = 'Bearer ';
beforeAll(async () => {
    let mongoDocuments = await global.setUpDb(testId);
    try {
        authToken = await getAuthToken(<APP_URL>, mongoDocuments[<COLLECTION_NAME>][<INDEX_OF_USER_DOCUMENT>]);
    } catch (err) {}
});
```
`authToken` is in the format `Bearer <TOKEN>` but when you initialize this variable, always initialize it with `'Bearer '` value. If you use this code, make sure to add the following `afterAll` function:
```javascript
afterAll(async () => {
    await global.cleanUpDb();
});
```

When you make an API request, make sure to use `axios` to the URL `http://localhost:3000`.

Here is the request data in a JSON format:
```json
{{testData}}
```
Here are a couple of additional points to have in mind:
When you create names for your tests you make sure that they are very intuitive and in a human-readable form.

Be very careful when asserting IDs because IDs can be different in the database from the IDs that are captured in the API request data from which you're creating tests. Also, do not assert dates - this is not good because they change a lot and are irrelevant to tests.

When you make an API request, make sure to use `axios` to the URL `http://localhost:3000`.

When setting up an API request, don't define all possible headers but only the important ones.

Let's think step by step and create as many automated integration tests as you can think of in Jest. First, determine if you need to use the database. Then, if you need to use the authentication. And finally, create the code.
